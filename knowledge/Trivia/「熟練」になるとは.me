技術的に困難な課題を解決するには、やはりハードスキル（操作方法などの定型化しやすいスキル）と
ソフトスキル（デバッグなどの定型化しにくいスキル）の両方が必要でしょう。

クリックすると何が起きるかを知っているのは大切ですし、
エラーが起こったらメッセージを読んで理解するスキルも重要でしょう。

また「デバッグ」と言っても、具体的に注目すべきエラーメッセージはどれなのかを考えたり、
今の調べ方が正しいのかどうかを考え直したり、AIに質問するかどうか、周囲の人に助けを求めるべきかどうかを見極める力なども必要です

https://railstutorial.jp/chapters/7.0/images/figures/tech_support_cheat_sheet_ja.png

特に、Webアプリケーションは様々な仕組みが積み重なって動いているため、その概要を理解するだけでも多くの知識と経験が必要です。

言い換えると、皆さんがこれから挑戦するWebアプリケーション開発は、こうしたスキルの習得にもってこいの題材とも言えます。

しかもRailsの場合は、適切なライブラリの選定方法、bundle installやbundle updateの実行方法、rails serverが動かなくなったときの対応方法といったテクニックも一緒に学べます
（これらの用語が分からなくても大丈夫です。本チュートリアルで１章ずつ説明していきます）。

難しいWebアプリケーション開発に挑戦しているので、本チュートリアルの途中で「うまくいかない!!」という場面に遭うこともあるでしょう。

ハマりやすい手順については注釈やヘルプページなどで補足していますが、すべての状況をカバーするのは不可能です。

そうしたトラブルはむしろ「熟練」になるための修練だと捉えて、エラー解決に取り組んでみましょう。それでも、どうしてもうまくいかないときは...
「バグではありません、仕様です!」（『コマンドライン編』より）
